{"version":3,"file":"index.esm.js","sources":["../src/tsort.ts"],"sourcesContent":["/**\n * A module for topological sorting and strongly connected components.\n * This is a port of the Ruby language TSort module (https://github.com/ruby/ruby/blob/master/lib/tsort.rb).\n * See the BSDL file for license information.\n */\n\n/**\n * Performs a topological sort of the given nodes.\n *\n * @param nodes - an `Iterable` of nodes to sort\n * @param children - a function that takes a node and returns an `Iterable` for the children of the node\n * @returns a `Generator` that yields the nodes in topological order\n * @throws `Error` if a cycle is detected\n *\n * @example\n * Iterate over the sorted nodes and log them to the console:\n * ```ts\n * const g = new Map<number, number[]>();\n * g.set(1, [2, 3]).set(2, [3]).set(3, []);\n * const i = tsort(g.keys(), (node) => { return g.get(node)! })\n * for (const node of i) { console.log(node); }\n * // Prints:\n * // 3\n * // 2\n * // 1\n * ```\n * @example\n * Create an array from the sorted nodes and log the array to the console:\n * ```ts\n * const g = new Map<number, number[]>();\n * g.set(1, [2, 3]).set(2, [3]).set(3, []);\n * const sorted = Array.from(tsort(g.keys(), (node) => { return g.get(node)! }))\n * console.log(sorted);\n * // Prints:\n * // [3, 2, 1]\n * ```\n */\nexport function* tsort<T>(\n  nodes: Iterable<T>,\n  children: (node: T) => Iterable<T>,\n): Generator<T, void> {\n  for (const component of stronglyConnectedComponents<T>(nodes, children)) {\n    if (component.length == 1) yield component[0];\n    else throw new Error('Cycle detected');\n  }\n}\n\n/**\n * Returns the strongly connected components of the given nodes.\n *\n * @param nodes - an `Iterable` of nodes to sort\n * @param children - a function that takes a node and returns an `Iterable` for the children of the node\n * @returns a `Generator` that yields the each strongly connected component as an `Array` of nodes\n *\n * @example\n * Iterate over each strongly connected component and log the strongly connected component to the console\n * ```ts\n * const g = new Map<number, number[]>();\n *   g.set(1, [2])\n *   .set(2, [1, 5])\n *   .set(3, [4])\n *   .set(4, [3, 5])\n *   .set(5, [6])\n *   .set(6, [7])\n *   .set(7, [8])\n *   .set(8, [6, 9])\n *   .set(9, []);\n * const i = stronglyConnectedComponents(g.keys(), (node) => { return g.get(node)! })\n * for (const node of i) { console.log(node); }\n * // Prints:\n *\n * // [9]\n * // [6, 7, 8]\n * // [5]\n * // [1, 2]\n * // [3, 4]\n * ```\n */\nexport function* stronglyConnectedComponents<T>(\n  nodes: Iterable<T>,\n  children: (node: T) => Iterable<T>,\n): Generator<T[], void> {\n  const idMap = new Map<T, number | null>();\n  const stack: T[] = [];\n  for (const node of nodes) {\n    if (!idMap.has(node)) {\n      const i = stronglyConnectedComponentsFrom<T>(\n        node,\n        children,\n        idMap,\n        stack,\n      );\n\n      let result = i.next();\n      while (!result.done) {\n        yield result.value;\n        result = i.next();\n      }\n    }\n  }\n}\n\nfunction* stronglyConnectedComponentsFrom<T>(\n  node: T,\n  children: (node: T) => Iterable<T>,\n  idMap: Map<T, number | null>,\n  stack: T[],\n): Iterator<T[], number> {\n  let minimumId = idMap.size;\n  const nodeId = idMap.size;\n  const stackLength = stack.length;\n  idMap.set(node, idMap.size);\n  stack.push(node);\n\n  for (const child of children(node)) {\n    if (idMap.has(child)) {\n      const childId = idMap.get(child);\n      if (childId != null && childId < minimumId) {\n        minimumId = childId;\n      }\n    } else {\n      const i = stronglyConnectedComponentsFrom<T>(\n        child,\n        children,\n        idMap,\n        stack,\n      );\n\n      let result = i.next();\n      while (!result.done) {\n        yield* [result.value];\n        result = i.next();\n      }\n\n      const subMinimumId = result.value;\n      if (subMinimumId < minimumId) {\n        minimumId = subMinimumId;\n      }\n    }\n  }\n\n  if (nodeId == minimumId) {\n    const component = stack.splice(stackLength);\n    for (const n of component) {\n      idMap.set(n, null);\n    }\n    yield component;\n  }\n  return minimumId;\n}\n"],"names":[],"mappings":"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"}